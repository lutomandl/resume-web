# NOTE : This file is a copy of the servers schema.

type About {
  createdAt: DateTime
  firstParagraph: String!
  heading: HeadingEntityResponse
  image: UploadFileEntityResponse!
  locale: String
  localizations(
    publicationState: PublicationState = LIVE
  ): AboutRelationResponseCollection
  publishedAt: DateTime
  secondParagraph: String!
  sectionId: String!
  thirdParagraph: String!
  updatedAt: DateTime
}

type AboutEntity {
  attributes: About
  id: ID
}

type AboutEntityResponse {
  data: AboutEntity
}

input AboutInput {
  firstParagraph: String
  heading: ID
  image: ID
  publishedAt: DateTime
  secondParagraph: String
  sectionId: String
  thirdParagraph: String
}

type AboutRelationResponseCollection {
  data: [AboutEntity!]!
}

input BooleanFilterInput {
  and: [Boolean]
  between: [Boolean]
  contains: Boolean
  containsi: Boolean
  endsWith: Boolean
  eq: Boolean
  eqi: Boolean
  gt: Boolean
  gte: Boolean
  in: [Boolean]
  lt: Boolean
  lte: Boolean
  ne: Boolean
  not: BooleanFilterInput
  notContains: Boolean
  notContainsi: Boolean
  notIn: [Boolean]
  notNull: Boolean
  null: Boolean
  or: [Boolean]
  startsWith: Boolean
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

input DateFilterInput {
  and: [Date]
  between: [Date]
  contains: Date
  containsi: Date
  endsWith: Date
  eq: Date
  eqi: Date
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  not: DateFilterInput
  notContains: Date
  notContainsi: Date
  notIn: [Date]
  notNull: Boolean
  null: Boolean
  or: [Date]
  startsWith: Date
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilterInput {
  and: [DateTime]
  between: [DateTime]
  contains: DateTime
  containsi: DateTime
  endsWith: DateTime
  eq: DateTime
  eqi: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  ne: DateTime
  not: DateTimeFilterInput
  notContains: DateTime
  notContainsi: DateTime
  notIn: [DateTime]
  notNull: Boolean
  null: Boolean
  or: [DateTime]
  startsWith: DateTime
}

type Employer {
  createdAt: DateTime
  experiences(
    filters: ExperienceFiltersInput
    pagination: PaginationArg = {}
    publicationState: PublicationState = LIVE
    sort: [String] = []
  ): ExperienceRelationResponseCollection
  locale: String
  localizations(
    filters: EmployerFiltersInput
    pagination: PaginationArg = {}
    publicationState: PublicationState = LIVE
    sort: [String] = []
  ): EmployerRelationResponseCollection
  logo: UploadFileEntityResponse!
  name: String!
  publishedAt: DateTime
  updatedAt: DateTime
}

type EmployerEntity {
  attributes: Employer
  id: ID
}

type EmployerEntityResponse {
  data: EmployerEntity
}

type EmployerEntityResponseCollection {
  data: [EmployerEntity!]!
  meta: ResponseCollectionMeta!
}

input EmployerFiltersInput {
  and: [EmployerFiltersInput]
  createdAt: DateTimeFilterInput
  experiences: ExperienceFiltersInput
  id: IDFilterInput
  locale: StringFilterInput
  localizations: EmployerFiltersInput
  name: StringFilterInput
  not: EmployerFiltersInput
  or: [EmployerFiltersInput]
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input EmployerInput {
  experiences: [ID]
  logo: ID
  name: String
  publishedAt: DateTime
}

type EmployerRelationResponseCollection {
  data: [EmployerEntity!]!
}

type Experience {
  createdAt: DateTime
  description: String!
  employer: EmployerEntityResponse
  endDate: Date
  locale: String
  localizations(
    filters: ExperienceFiltersInput
    pagination: PaginationArg = {}
    publicationState: PublicationState = LIVE
    sort: [String] = []
  ): ExperienceRelationResponseCollection
  location: String!
  position: String!
  publishedAt: DateTime
  startDate: Date!
  technologies(
    filters: TechnologyFiltersInput
    pagination: PaginationArg = {}
    publicationState: PublicationState = LIVE
    sort: [String] = []
  ): TechnologyRelationResponseCollection
  updatedAt: DateTime
}

type ExperienceEntity {
  attributes: Experience
  id: ID
}

type ExperienceEntityResponse {
  data: ExperienceEntity
}

type ExperienceEntityResponseCollection {
  data: [ExperienceEntity!]!
  meta: ResponseCollectionMeta!
}

input ExperienceFiltersInput {
  and: [ExperienceFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  employer: EmployerFiltersInput
  endDate: DateFilterInput
  id: IDFilterInput
  locale: StringFilterInput
  localizations: ExperienceFiltersInput
  location: StringFilterInput
  not: ExperienceFiltersInput
  or: [ExperienceFiltersInput]
  position: StringFilterInput
  publishedAt: DateTimeFilterInput
  startDate: DateFilterInput
  technologies: TechnologyFiltersInput
  updatedAt: DateTimeFilterInput
}

input ExperienceInput {
  description: String
  employer: ID
  endDate: Date
  location: String
  position: String
  publishedAt: DateTime
  startDate: Date
  technologies: [ID]
}

type ExperienceRelationResponseCollection {
  data: [ExperienceEntity!]!
}

input FileInfoInput {
  alternativeText: String
  caption: String
  name: String
}

input FloatFilterInput {
  and: [Float]
  between: [Float]
  contains: Float
  containsi: Float
  endsWith: Float
  eq: Float
  eqi: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  ne: Float
  not: FloatFilterInput
  notContains: Float
  notContainsi: Float
  notIn: [Float]
  notNull: Boolean
  null: Boolean
  or: [Float]
  startsWith: Float
}

union GenericMorph =
    About
  | Employer
  | Experience
  | Header
  | Heading
  | I18NLocale
  | Project
  | Technology
  | UploadFile
  | UploadFolder
  | UsersPermissionsPermission
  | UsersPermissionsRole
  | UsersPermissionsUser

type Header {
  createdAt: DateTime
  locale: String
  localizations(
    publicationState: PublicationState = LIVE
  ): HeaderRelationResponseCollection
  name: String!
  profession: String!
  publishedAt: DateTime
  residence: String!
  updatedAt: DateTime
}

type HeaderEntity {
  attributes: Header
  id: ID
}

type HeaderEntityResponse {
  data: HeaderEntity
}

input HeaderInput {
  name: String
  profession: String
  publishedAt: DateTime
  residence: String
}

type HeaderRelationResponseCollection {
  data: [HeaderEntity!]!
}

type Heading {
  createdAt: DateTime
  heading: String!
  locale: String
  localizations(
    filters: HeadingFiltersInput
    pagination: PaginationArg = {}
    publicationState: PublicationState = LIVE
    sort: [String] = []
  ): HeadingRelationResponseCollection
  publishedAt: DateTime
  sectionId: String!
  updatedAt: DateTime
}

type HeadingEntity {
  attributes: Heading
  id: ID
}

type HeadingEntityResponse {
  data: HeadingEntity
}

type HeadingEntityResponseCollection {
  data: [HeadingEntity!]!
  meta: ResponseCollectionMeta!
}

input HeadingFiltersInput {
  and: [HeadingFiltersInput]
  createdAt: DateTimeFilterInput
  heading: StringFilterInput
  id: IDFilterInput
  locale: StringFilterInput
  localizations: HeadingFiltersInput
  not: HeadingFiltersInput
  or: [HeadingFiltersInput]
  publishedAt: DateTimeFilterInput
  sectionId: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input HeadingInput {
  heading: String
  publishedAt: DateTime
  sectionId: String
}

type HeadingRelationResponseCollection {
  data: [HeadingEntity!]!
}

type I18NLocale {
  code: String
  createdAt: DateTime
  name: String
  updatedAt: DateTime
}

"""
A string used to identify an i18n locale
"""
scalar I18NLocaleCode

type I18NLocaleEntity {
  attributes: I18NLocale
  id: ID
}

type I18NLocaleEntityResponse {
  data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
  data: [I18NLocaleEntity!]!
  meta: ResponseCollectionMeta!
}

input I18NLocaleFiltersInput {
  and: [I18NLocaleFiltersInput]
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: I18NLocaleFiltersInput
  or: [I18NLocaleFiltersInput]
  updatedAt: DateTimeFilterInput
}

input IDFilterInput {
  and: [ID]
  between: [ID]
  contains: ID
  containsi: ID
  endsWith: ID
  eq: ID
  eqi: ID
  gt: ID
  gte: ID
  in: [ID]
  lt: ID
  lte: ID
  ne: ID
  not: IDFilterInput
  notContains: ID
  notContainsi: ID
  notIn: [ID]
  notNull: Boolean
  null: Boolean
  or: [ID]
  startsWith: ID
}

input IntFilterInput {
  and: [Int]
  between: [Int]
  contains: Int
  containsi: Int
  endsWith: Int
  eq: Int
  eqi: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  ne: Int
  not: IntFilterInput
  notContains: Int
  notContainsi: Int
  notIn: [Int]
  notNull: Boolean
  null: Boolean
  or: [Int]
  startsWith: Int
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input JSONFilterInput {
  and: [JSON]
  between: [JSON]
  contains: JSON
  containsi: JSON
  endsWith: JSON
  eq: JSON
  eqi: JSON
  gt: JSON
  gte: JSON
  in: [JSON]
  lt: JSON
  lte: JSON
  ne: JSON
  not: JSONFilterInput
  notContains: JSON
  notContainsi: JSON
  notIn: [JSON]
  notNull: Boolean
  null: Boolean
  or: [JSON]
  startsWith: JSON
}

type Mutation {
  """
  Change user password. Confirm with the current password.
  """
  changePassword(
    currentPassword: String!
    password: String!
    passwordConfirmation: String!
  ): UsersPermissionsLoginPayload
  createAboutLocalization(
    data: AboutInput
    id: ID
    locale: I18NLocaleCode
  ): AboutEntityResponse
  createEmployer(
    data: EmployerInput!
    locale: I18NLocaleCode
  ): EmployerEntityResponse
  createEmployerLocalization(
    data: EmployerInput
    id: ID
    locale: I18NLocaleCode
  ): EmployerEntityResponse
  createExperience(
    data: ExperienceInput!
    locale: I18NLocaleCode
  ): ExperienceEntityResponse
  createExperienceLocalization(
    data: ExperienceInput
    id: ID
    locale: I18NLocaleCode
  ): ExperienceEntityResponse
  createHeaderLocalization(
    data: HeaderInput
    id: ID
    locale: I18NLocaleCode
  ): HeaderEntityResponse
  createHeading(
    data: HeadingInput!
    locale: I18NLocaleCode
  ): HeadingEntityResponse
  createHeadingLocalization(
    data: HeadingInput
    id: ID
    locale: I18NLocaleCode
  ): HeadingEntityResponse
  createProject(
    data: ProjectInput!
    locale: I18NLocaleCode
  ): ProjectEntityResponse
  createProjectLocalization(
    data: ProjectInput
    id: ID
    locale: I18NLocaleCode
  ): ProjectEntityResponse
  createTechnology(data: TechnologyInput!): TechnologyEntityResponse
  createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
  createUploadFolder(data: UploadFolderInput!): UploadFolderEntityResponse

  """
  Create a new role
  """
  createUsersPermissionsRole(
    data: UsersPermissionsRoleInput!
  ): UsersPermissionsCreateRolePayload

  """
  Create a new user
  """
  createUsersPermissionsUser(
    data: UsersPermissionsUserInput!
  ): UsersPermissionsUserEntityResponse!
  deleteAbout(locale: I18NLocaleCode): AboutEntityResponse
  deleteEmployer(id: ID!, locale: I18NLocaleCode): EmployerEntityResponse
  deleteExperience(id: ID!, locale: I18NLocaleCode): ExperienceEntityResponse
  deleteHeader(locale: I18NLocaleCode): HeaderEntityResponse
  deleteHeading(id: ID!, locale: I18NLocaleCode): HeadingEntityResponse
  deleteProject(id: ID!, locale: I18NLocaleCode): ProjectEntityResponse
  deleteTechnology(id: ID!): TechnologyEntityResponse
  deleteUploadFile(id: ID!): UploadFileEntityResponse
  deleteUploadFolder(id: ID!): UploadFolderEntityResponse

  """
  Delete an existing role
  """
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload

  """
  Delete an existing user
  """
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!

  """
  Confirm an email users email address
  """
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload

  """
  Request a reset password token
  """
  forgotPassword(email: String!): UsersPermissionsPasswordPayload
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  multipleUpload(
    field: String
    files: [Upload]!
    ref: String
    refId: ID
  ): [UploadFileEntityResponse]!

  """
  Register a user
  """
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  removeFile(id: ID!): UploadFileEntityResponse

  """
  Reset user password. Confirm with a code (resetToken from forgotPassword)
  """
  resetPassword(
    code: String!
    password: String!
    passwordConfirmation: String!
  ): UsersPermissionsLoginPayload
  updateAbout(data: AboutInput!, locale: I18NLocaleCode): AboutEntityResponse
  updateEmployer(
    data: EmployerInput!
    id: ID!
    locale: I18NLocaleCode
  ): EmployerEntityResponse
  updateExperience(
    data: ExperienceInput!
    id: ID!
    locale: I18NLocaleCode
  ): ExperienceEntityResponse
  updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
  updateHeader(data: HeaderInput!, locale: I18NLocaleCode): HeaderEntityResponse
  updateHeading(
    data: HeadingInput!
    id: ID!
    locale: I18NLocaleCode
  ): HeadingEntityResponse
  updateProject(
    data: ProjectInput!
    id: ID!
    locale: I18NLocaleCode
  ): ProjectEntityResponse
  updateTechnology(data: TechnologyInput!, id: ID!): TechnologyEntityResponse
  updateUploadFile(data: UploadFileInput!, id: ID!): UploadFileEntityResponse
  updateUploadFolder(
    data: UploadFolderInput!
    id: ID!
  ): UploadFolderEntityResponse

  """
  Update an existing role
  """
  updateUsersPermissionsRole(
    data: UsersPermissionsRoleInput!
    id: ID!
  ): UsersPermissionsUpdateRolePayload

  """
  Update an existing user
  """
  updateUsersPermissionsUser(
    data: UsersPermissionsUserInput!
    id: ID!
  ): UsersPermissionsUserEntityResponse!
  upload(
    field: String
    file: Upload!
    info: FileInfoInput
    ref: String
    refId: ID
  ): UploadFileEntityResponse!
}

type Pagination {
  page: Int!
  pageCount: Int!
  pageSize: Int!
  total: Int!
}

input PaginationArg {
  limit: Int
  page: Int
  pageSize: Int
  start: Int
}

type Project {
  createdAt: DateTime
  description: String!
  image: UploadFileEntityResponse!
  locale: String
  localizations(
    filters: ProjectFiltersInput
    pagination: PaginationArg = {}
    publicationState: PublicationState = LIVE
    sort: [String] = []
  ): ProjectRelationResponseCollection
  name: String!
  publishedAt: DateTime
  technologies(
    filters: TechnologyFiltersInput
    pagination: PaginationArg = {}
    publicationState: PublicationState = LIVE
    sort: [String] = []
  ): TechnologyRelationResponseCollection
  updatedAt: DateTime
}

type ProjectEntity {
  attributes: Project
  id: ID
}

type ProjectEntityResponse {
  data: ProjectEntity
}

type ProjectEntityResponseCollection {
  data: [ProjectEntity!]!
  meta: ResponseCollectionMeta!
}

input ProjectFiltersInput {
  and: [ProjectFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  locale: StringFilterInput
  localizations: ProjectFiltersInput
  name: StringFilterInput
  not: ProjectFiltersInput
  or: [ProjectFiltersInput]
  publishedAt: DateTimeFilterInput
  technologies: TechnologyFiltersInput
  updatedAt: DateTimeFilterInput
}

input ProjectInput {
  description: String
  image: ID
  name: String
  publishedAt: DateTime
  technologies: [ID]
}

type ProjectRelationResponseCollection {
  data: [ProjectEntity!]!
}

enum PublicationState {
  LIVE
  PREVIEW
}

type Query {
  about(
    locale: I18NLocaleCode
    publicationState: PublicationState = LIVE
  ): AboutEntityResponse
  employer(id: ID, locale: I18NLocaleCode): EmployerEntityResponse
  employers(
    filters: EmployerFiltersInput
    locale: I18NLocaleCode
    pagination: PaginationArg = {}
    publicationState: PublicationState = LIVE
    sort: [String] = []
  ): EmployerEntityResponseCollection
  experience(id: ID, locale: I18NLocaleCode): ExperienceEntityResponse
  experiences(
    filters: ExperienceFiltersInput
    locale: I18NLocaleCode
    pagination: PaginationArg = {}
    publicationState: PublicationState = LIVE
    sort: [String] = []
  ): ExperienceEntityResponseCollection
  header(
    locale: I18NLocaleCode
    publicationState: PublicationState = LIVE
  ): HeaderEntityResponse
  heading(id: ID, locale: I18NLocaleCode): HeadingEntityResponse
  headings(
    filters: HeadingFiltersInput
    locale: I18NLocaleCode
    pagination: PaginationArg = {}
    publicationState: PublicationState = LIVE
    sort: [String] = []
  ): HeadingEntityResponseCollection
  i18NLocale(id: ID): I18NLocaleEntityResponse
  i18NLocales(
    filters: I18NLocaleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): I18NLocaleEntityResponseCollection
  me: UsersPermissionsMe
  project(id: ID, locale: I18NLocaleCode): ProjectEntityResponse
  projects(
    filters: ProjectFiltersInput
    locale: I18NLocaleCode
    pagination: PaginationArg = {}
    publicationState: PublicationState = LIVE
    sort: [String] = []
  ): ProjectEntityResponseCollection
  technologies(
    filters: TechnologyFiltersInput
    pagination: PaginationArg = {}
    publicationState: PublicationState = LIVE
    sort: [String] = []
  ): TechnologyEntityResponseCollection
  technology(id: ID): TechnologyEntityResponse
  uploadFile(id: ID): UploadFileEntityResponse
  uploadFiles(
    filters: UploadFileFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFileEntityResponseCollection
  uploadFolder(id: ID): UploadFolderEntityResponse
  uploadFolders(
    filters: UploadFolderFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFolderEntityResponseCollection
  usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
  usersPermissionsRoles(
    filters: UsersPermissionsRoleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
  usersPermissionsUsers(
    filters: UsersPermissionsUserFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsUserEntityResponseCollection
}

type ResponseCollectionMeta {
  pagination: Pagination!
}

input StringFilterInput {
  and: [String]
  between: [String]
  contains: String
  containsi: String
  endsWith: String
  eq: String
  eqi: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  not: StringFilterInput
  notContains: String
  notContainsi: String
  notIn: [String]
  notNull: Boolean
  null: Boolean
  or: [String]
  startsWith: String
}

type Technology {
  createdAt: DateTime
  publishedAt: DateTime
  technology: String!
  uid: String
  updatedAt: DateTime
}

type TechnologyEntity {
  attributes: Technology
  id: ID
}

type TechnologyEntityResponse {
  data: TechnologyEntity
}

type TechnologyEntityResponseCollection {
  data: [TechnologyEntity!]!
  meta: ResponseCollectionMeta!
}

input TechnologyFiltersInput {
  and: [TechnologyFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: TechnologyFiltersInput
  or: [TechnologyFiltersInput]
  publishedAt: DateTimeFilterInput
  technology: StringFilterInput
  uid: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input TechnologyInput {
  publishedAt: DateTime
  technology: String
  uid: String
}

type TechnologyRelationResponseCollection {
  data: [TechnologyEntity!]!
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

type UploadFile {
  alternativeText: String
  caption: String
  createdAt: DateTime
  ext: String
  formats: JSON
  hash: String!
  height: Int
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  size: Float!
  updatedAt: DateTime
  url: String!
  width: Int
}

type UploadFileEntity {
  attributes: UploadFile
  id: ID
}

type UploadFileEntityResponse {
  data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
  data: [UploadFileEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFileFiltersInput {
  alternativeText: StringFilterInput
  and: [UploadFileFiltersInput]
  caption: StringFilterInput
  createdAt: DateTimeFilterInput
  ext: StringFilterInput
  folder: UploadFolderFiltersInput
  folderPath: StringFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  height: IntFilterInput
  id: IDFilterInput
  mime: StringFilterInput
  name: StringFilterInput
  not: UploadFileFiltersInput
  or: [UploadFileFiltersInput]
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  size: FloatFilterInput
  updatedAt: DateTimeFilterInput
  url: StringFilterInput
  width: IntFilterInput
}

input UploadFileInput {
  alternativeText: String
  caption: String
  ext: String
  folder: ID
  folderPath: String
  formats: JSON
  hash: String
  height: Int
  mime: String
  name: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  size: Float
  url: String
  width: Int
}

type UploadFileRelationResponseCollection {
  data: [UploadFileEntity!]!
}

type UploadFolder {
  children(
    filters: UploadFolderFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFolderRelationResponseCollection
  createdAt: DateTime
  files(
    filters: UploadFileFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFileRelationResponseCollection
  name: String!
  parent: UploadFolderEntityResponse
  path: String!
  pathId: Int!
  updatedAt: DateTime
}

type UploadFolderEntity {
  attributes: UploadFolder
  id: ID
}

type UploadFolderEntityResponse {
  data: UploadFolderEntity
}

type UploadFolderEntityResponseCollection {
  data: [UploadFolderEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFolderFiltersInput {
  and: [UploadFolderFiltersInput]
  children: UploadFolderFiltersInput
  createdAt: DateTimeFilterInput
  files: UploadFileFiltersInput
  id: IDFilterInput
  name: StringFilterInput
  not: UploadFolderFiltersInput
  or: [UploadFolderFiltersInput]
  parent: UploadFolderFiltersInput
  path: StringFilterInput
  pathId: IntFilterInput
  updatedAt: DateTimeFilterInput
}

input UploadFolderInput {
  children: [ID]
  files: [ID]
  name: String
  parent: ID
  path: String
  pathId: Int
}

type UploadFolderRelationResponseCollection {
  data: [UploadFolderEntity!]!
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  blocked: Boolean
  confirmed: Boolean
  email: String
  id: ID!
  role: UsersPermissionsMeRole
  username: String!
}

type UsersPermissionsMeRole {
  description: String
  id: ID!
  name: String!
  type: String
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsPermission {
  action: String!
  createdAt: DateTime
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
  attributes: UsersPermissionsPermission
  id: ID
}

input UsersPermissionsPermissionFiltersInput {
  action: StringFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: UsersPermissionsPermissionFiltersInput
  or: [UsersPermissionsPermissionFiltersInput]
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
}

type UsersPermissionsPermissionRelationResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
}

input UsersPermissionsRegisterInput {
  email: String!
  password: String!
  username: String!
}

type UsersPermissionsRole {
  createdAt: DateTime
  description: String
  name: String!
  permissions(
    filters: UsersPermissionsPermissionFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsPermissionRelationResponseCollection
  type: String
  updatedAt: DateTime
  users(
    filters: UsersPermissionsUserFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsUserRelationResponseCollection
}

type UsersPermissionsRoleEntity {
  attributes: UsersPermissionsRole
  id: ID
}

type UsersPermissionsRoleEntityResponse {
  data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsRoleFiltersInput {
  and: [UsersPermissionsRoleFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: UsersPermissionsRoleFiltersInput
  or: [UsersPermissionsRoleFiltersInput]
  permissions: UsersPermissionsPermissionFiltersInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
  users: UsersPermissionsUserFiltersInput
}

input UsersPermissionsRoleInput {
  description: String
  name: String
  permissions: [ID]
  type: String
  users: [ID]
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUser {
  blocked: Boolean
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  provider: String
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
  username: String!
}

type UsersPermissionsUserEntity {
  attributes: UsersPermissionsUser
  id: ID
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
  data: [UsersPermissionsUserEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsUserFiltersInput {
  and: [UsersPermissionsUserFiltersInput]
  blocked: BooleanFilterInput
  confirmationToken: StringFilterInput
  confirmed: BooleanFilterInput
  createdAt: DateTimeFilterInput
  email: StringFilterInput
  id: IDFilterInput
  not: UsersPermissionsUserFiltersInput
  or: [UsersPermissionsUserFiltersInput]
  password: StringFilterInput
  provider: StringFilterInput
  resetPasswordToken: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
  username: StringFilterInput
}

input UsersPermissionsUserInput {
  blocked: Boolean
  confirmationToken: String
  confirmed: Boolean
  email: String
  password: String
  provider: String
  resetPasswordToken: String
  role: ID
  username: String
}

type UsersPermissionsUserRelationResponseCollection {
  data: [UsersPermissionsUserEntity!]!
}
